Что это такое и как с этим работать?

Установка:
----------

Создайте virtualenv для третьего питона, сделайте

 $ pip install -r requirements.txt
 $ pip install -e .


Концепты:
---------

Задача - это задача, у неё есть internal_name (как в полигоне, например "a-plus-b" или "array-max")

Контест - это контест, в нём есть задачи

Чекер - это программа, проверяющая решение. Рекомендуется использовать testlib для написания
        (https://github.com/MikeMirzayanov/testlib). Чекер принимает на вход три аргумента:
        путь к входным данным, путь к выходным данным и путь к ответу (выходным данным эталонного решения).
        Чекеры живут в каталоге "checkers/" задачи.

        Коды выхода:
        0 - OK
        1 - Wrong Answer
        2 - Presentation Error (будет преобразовано в Wrong Answer)
        другое - Внутренняя ошибка чекера

Решение - это какое-то (правильное или неправильное) решение для задачи.
          Решения живут в каталоге "solutions/" задачи.
          У задач есть tag: main, correct или incorrect, соответственно для эталонного решения,
          правильного и неправильного, у неправильного можно ещё и задавать список вердиктов, которые
          оно может получать.
Генератор - детерминированно от аргументов командной строки выводит тест (входные данные) на стандартный вывод.
            Генераторы живут в "generators/".

Валидатор - программа, проверяющая соответствие входных данных теста формату входных данных задачи.
            Принимает на стандартный ввод тест для проверки, нулевой код возврата означает валидный тест.
            Живут в "validators/"

Интерактор - если задача интерактивная, то интерактор общается с решением и потом вывод интерактора
             (поток tout в C++ testlib) отсылается чекеру (а не сразу вывод решения).

             Общение с решением происходит через stdin/stdout.

             Первым аргументом принимает путь к входным данным,
             вторым аргументом принимает путь, куда писать вывод (пойдёт на вход чекеру).

Условие - имеют название языка (например "russian") и название задачи. Живут в "statements/",
          например "statements/russian/name.txt" содержит имя задачи на русском, а
          "statements/russian/problem.tex" содержит условие.
          
          Создавайте условия с помощью "pygon addstatement", например
          "pygon addstatement -l russian -n 'Сложить два числа'"

Тесты - нумеруются с единицы, файлы называются 01, 02, .... 09, 10, 11, ... 99, 100, 101 и тд

Дескрипторы
-----------

Рядом с чекерами, решениями, генераторами, валидаторами, тестами лежат дескрипторы -
.yaml файлы с описаниями ресурсов. Например, рядом с решением solution.cpp должен лежать
solution.yaml с подобным содержимым:

    language: c++11
    tag: incorrect
    verdicts: [WA]

Чтобы сгенерировать дескрипторы для ресурсов, у которых их нет можно сделать

    $ pygon discover

Создание задачи
---------------

    $ pygon init my-example-problem

Создаст каталог "my-example-problem", а там много всего, включая хорошо
прокомментированный problem.yaml

Добавить много сгенерированных тестов
-------------------------------------

    $ pygon edittests

умеет много чего путём редактирования текстового файла, например добавим строку

    G gen [1..10] 123 

эта строка превратится в 10 тестов, каждый генерируется командой "gen 1 123", "gen 2 123" и т.д.
Естественно, генератор gen (например из исходника gen.cpp) должен существовать.
Листы можно даже задавать в хаскель стиле, типа [0,5..50] - это 0, 5, 10, 15, ..., 50

Собрать задачу (или контест)
----------------------------

    $ pygon build

в каталоге pygon-build (который очень удобно добавить в .gitignore) соберётся задача.

Чтобы проверить правильность тэгов всех решений и подобного можно запустить

    $ pygon verify

Запустить решения на тестах
---------------------------

    $ pygon invoke

Как сделать контест
-------------------

    $ pygon initcontest my-example-contest

Создаст каталог "my-example-contest".
Формат contest.yaml:

    name:
        english: "Example contest"
        russian: "Пробный турнир"

    location:
        english: "London, UK"
        russian: "Лондон, Великобритания"

    date:
        english: "Jan 1, 2019"
        russian: "1 января 2019"

    problems:
        - id: aplusb
          prefix: A
        - id: interactive-guess
          prefix: B

Задачи живут в problems/INTERNALNAME, например problems/aplusb

Можно делать симлинки на задачи, вместо того чтобы задачи прям внутри контеста делать.

команды build и verify работают и для контеста.

Экспорт в ejudge (только для линукс)
------------------------------------

Если есть ssh-доступ к аккаунту ejudge:

1. Создать контест (например в веб-интерфейсе), настроить его, но задачи не добавлять.
2. Запустить команду, подобную

    $ pygon ejudgedeploy -l russian -d "/home/judges/002001" | ssh ejudge@ejudge.olimp-nw.ru

И нажать на кнопку "Reload contest settings" в веб-интерфейсе.

Если у вас не линукс, то можно (через git) иметь каталог с контестом на сервере,
установить на сервере pygon и делать прям на сервере

     $ pygon ejudgedeploy -l russian -d "/home/judges/002001" | sh
